// <auto-generated />
using fpv_info.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace fpv_info.Migrations
{
    [DbContext(typeof(PartsContext))]
    [Migration("20180128200140_Initial_28_01_2018")]
    partial class Initial_28_01_2018
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("fpv_info.Models.AccessoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int?>("TypeId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("fpv_info.Models.AccessoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.HasKey("Id");

                    b.ToTable("AccessoryTypes");
                });

            modelBuilder.Entity("fpv_info.Models.Antenna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AntennaConnectorId");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<int?>("FrequencyId");

                    b.Property<float>("Gain");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("AntennaConnectorId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Antennas");
                });

            modelBuilder.Entity("fpv_info.Models.AntennaConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AntennaConnector");
                });

            modelBuilder.Entity("fpv_info.Models.AspectRatio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AspectsRatio");
                });

            modelBuilder.Entity("fpv_info.Models.BattaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BattaryTypes");
                });

            modelBuilder.Entity("fpv_info.Models.Battery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BattaryTypeId");

                    b.Property<int?>("CapacityId");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimension");

                    b.Property<int?>("DischargeRateId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("BattaryTypeId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("DischargeRateId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VoltageId");

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("fpv_info.Models.BEC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("PDBId");

                    b.HasKey("Id");

                    b.HasIndex("PDBId");

                    b.ToTable("BECs");
                });

            modelBuilder.Entity("fpv_info.Models.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AspectRatioId");

                    b.Property<bool>("DVR");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimension");

                    b.Property<int?>("FOVId");

                    b.Property<int?>("HorizontalResolutionId");

                    b.Property<bool>("ImageFlip");

                    b.Property<int?>("ImageSensorId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<bool>("Mic");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<bool>("OSD");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("AspectRatioId");

                    b.HasIndex("FOVId");

                    b.HasIndex("HorizontalResolutionId");

                    b.HasIndex("ImageSensorId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VoltageId");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("fpv_info.Models.Capacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Capacity");
                });

            modelBuilder.Entity("fpv_info.Models.Charger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChargeCurrentRange");

                    b.Property<string>("CurrentDrainBalancing");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimension");

                    b.Property<string>("DischargeCurrentRange");

                    b.Property<bool>("IsCompared");

                    b.Property<int>("LiPoCellCount");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int>("NiCd_NiMHCellCount");

                    b.Property<int?>("PbBatteryVoltageId");

                    b.Property<int?>("PowerChargeId");

                    b.Property<int?>("PowerDischargeId");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PbBatteryVoltageId");

                    b.HasIndex("PowerChargeId");

                    b.HasIndex("PowerDischargeId");

                    b.HasIndex("VoltageId");

                    b.ToTable("Chargers");
                });

            modelBuilder.Entity("fpv_info.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("fpv_info.Models.Current", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currents");
                });

            modelBuilder.Entity("fpv_info.Models.DischargeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DischargeRates");
                });

            modelBuilder.Entity("fpv_info.Models.Display", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("fpv_info.Models.ESC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("BEC");

                    b.Property<int?>("CurrentId");

                    b.Property<bool>("DShot1200");

                    b.Property<bool>("DShot150");

                    b.Property<bool>("DShot300");

                    b.Property<bool>("DShot600");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimensions");

                    b.Property<int?>("FirmwareId");

                    b.Property<int?>("InstallDimensionId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<bool>("Multishot");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<bool>("Oneshot125");

                    b.Property<bool>("Oneshot42");

                    b.Property<int?>("PeakCurrentId");

                    b.Property<int?>("ProcessorId");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("FirmwareId");

                    b.HasIndex("InstallDimensionId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PeakCurrentId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("VoltageId");

                    b.ToTable("ESCs");
                });

            modelBuilder.Entity("fpv_info.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccessoryModelId");

                    b.Property<string>("Alt");

                    b.Property<int?>("AntennaId");

                    b.Property<int?>("BatteryId");

                    b.Property<int?>("CameraId");

                    b.Property<int?>("ChargerId");

                    b.Property<int?>("ESCId");

                    b.Property<int?>("FlightControllerId");

                    b.Property<int?>("FrameId");

                    b.Property<int?>("FuselageId");

                    b.Property<int?>("GoggleId");

                    b.Property<int?>("LightId");

                    b.Property<int?>("MotorId");

                    b.Property<string>("Name");

                    b.Property<int?>("PDBId");

                    b.Property<string>("Path");

                    b.Property<int?>("PropId");

                    b.Property<int?>("RCOtherId");

                    b.Property<int?>("ReceiverId");

                    b.Property<int?>("ServoId");

                    b.Property<int?>("TransmitterId");

                    b.Property<int?>("VideoReceiverId");

                    b.Property<int?>("VideoTransmitterId");

                    b.HasKey("Id");

                    b.HasIndex("AccessoryModelId");

                    b.HasIndex("AntennaId");

                    b.HasIndex("BatteryId");

                    b.HasIndex("CameraId");

                    b.HasIndex("ChargerId");

                    b.HasIndex("ESCId");

                    b.HasIndex("FlightControllerId");

                    b.HasIndex("FrameId");

                    b.HasIndex("FuselageId");

                    b.HasIndex("GoggleId");

                    b.HasIndex("LightId");

                    b.HasIndex("MotorId");

                    b.HasIndex("PDBId");

                    b.HasIndex("PropId");

                    b.HasIndex("RCOtherId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ServoId");

                    b.HasIndex("TransmitterId");

                    b.HasIndex("VideoReceiverId");

                    b.HasIndex("VideoTransmitterId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("fpv_info.Models.FirmwareModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Firmware");
                });

            modelBuilder.Entity("fpv_info.Models.FlightController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimensions");

                    b.Property<int?>("FirmwareId");

                    b.Property<int?>("GyroId");

                    b.Property<int?>("InstallDimensionId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<int>("N_PWMOut");

                    b.Property<int>("N_UART");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<bool>("OSD");

                    b.Property<bool>("PDB");

                    b.Property<int?>("ProcessorId");

                    b.Property<bool>("SlotSD");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("FirmwareId");

                    b.HasIndex("GyroId");

                    b.HasIndex("InstallDimensionId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("VoltageId");

                    b.ToTable("FlightControllers");
                });

            modelBuilder.Entity("fpv_info.Models.FOV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FOVs");
                });

            modelBuilder.Entity("fpv_info.Models.Frame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<int?>("InstallDimensionMotorId");

                    b.Property<int?>("InstallDimensionProcId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<int?>("MaterialId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int?>("TypeId");

                    b.Property<float>("Weight");

                    b.Property<int>("Wheelbase");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("InstallDimensionMotorId");

                    b.HasIndex("InstallDimensionProcId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TypeId");

                    b.ToTable("Frames");
                });

            modelBuilder.Entity("fpv_info.Models.FrameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FrameTypes");
                });

            modelBuilder.Entity("fpv_info.Models.Frequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Frequency");
                });

            modelBuilder.Entity("fpv_info.Models.Fuselage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<int?>("MaterialId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int?>("TypeId");

                    b.Property<float>("Weight");

                    b.Property<int>("Wingspan");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TypeId");

                    b.ToTable("Fuselages");
                });

            modelBuilder.Entity("fpv_info.Models.FuselageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FuselageTypes");
                });

            modelBuilder.Entity("fpv_info.Models.Goggle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AspectRatioId");

                    b.Property<bool>("DVR");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<int?>("DisplayId");

                    b.Property<int?>("FOVId");

                    b.Property<string>("IPD");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("AspectRatioId");

                    b.HasIndex("DisplayId");

                    b.HasIndex("FOVId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Goggles");
                });

            modelBuilder.Entity("fpv_info.Models.Gyro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Gyros");
                });

            modelBuilder.Entity("fpv_info.Models.HorizontalResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("HorizontalResolutions");
                });

            modelBuilder.Entity("fpv_info.Models.ImageSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ImageSensors");
                });

            modelBuilder.Entity("fpv_info.Models.InstallDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("InstallDimensions");
                });

            modelBuilder.Entity("fpv_info.Models.InstallDimensionMotor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("InstallMotorDimensions");
                });

            modelBuilder.Entity("fpv_info.Models.Light", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Lights");
                });

            modelBuilder.Entity("fpv_info.Models.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccessoryModelId");

                    b.Property<int?>("AccessoryModelId1");

                    b.Property<int?>("AccessoryModelId2");

                    b.Property<int?>("AntennaId");

                    b.Property<int?>("AntennaId1");

                    b.Property<int?>("AntennaId2");

                    b.Property<int?>("BatteryId");

                    b.Property<int?>("BatteryId1");

                    b.Property<int?>("BatteryId2");

                    b.Property<int?>("CameraId");

                    b.Property<int?>("CameraId1");

                    b.Property<int?>("CameraId2");

                    b.Property<int?>("ChargerId");

                    b.Property<int?>("ChargerId1");

                    b.Property<int?>("ChargerId2");

                    b.Property<int?>("ESCId");

                    b.Property<int?>("ESCId1");

                    b.Property<int?>("ESCId2");

                    b.Property<int?>("FlightControllerId");

                    b.Property<int?>("FlightControllerId1");

                    b.Property<int?>("FlightControllerId2");

                    b.Property<int?>("FrameId");

                    b.Property<int?>("FrameId1");

                    b.Property<int?>("FrameId2");

                    b.Property<int?>("FuselageId");

                    b.Property<int?>("FuselageId1");

                    b.Property<int?>("FuselageId2");

                    b.Property<int?>("GoggleId");

                    b.Property<int?>("GoggleId1");

                    b.Property<int?>("GoggleId2");

                    b.Property<int?>("LightId");

                    b.Property<int?>("LightId1");

                    b.Property<int?>("LightId2");

                    b.Property<int?>("LinkTypeId");

                    b.Property<int?>("MotorId");

                    b.Property<int?>("MotorId1");

                    b.Property<int?>("MotorId2");

                    b.Property<string>("Name");

                    b.Property<int?>("PDBId");

                    b.Property<int?>("PDBId1");

                    b.Property<int?>("PDBId2");

                    b.Property<string>("Path");

                    b.Property<int?>("PropId");

                    b.Property<int?>("PropId1");

                    b.Property<int?>("PropId2");

                    b.Property<int?>("RCOtherId");

                    b.Property<int?>("RCOtherId1");

                    b.Property<int?>("RCOtherId2");

                    b.Property<int?>("ReceiverId");

                    b.Property<int?>("ReceiverId1");

                    b.Property<int?>("ReceiverId2");

                    b.Property<int?>("ServoId");

                    b.Property<int?>("ServoId1");

                    b.Property<int?>("ServoId2");

                    b.Property<int?>("StoreId");

                    b.Property<int?>("TransmitterId");

                    b.Property<int?>("TransmitterId1");

                    b.Property<int?>("TransmitterId2");

                    b.Property<int?>("VideoReceiverId");

                    b.Property<int?>("VideoReceiverId1");

                    b.Property<int?>("VideoReceiverId2");

                    b.Property<int?>("VideoTransmitterId");

                    b.Property<int?>("VideoTransmitterId1");

                    b.Property<int?>("VideoTransmitterId2");

                    b.HasKey("Id");

                    b.HasIndex("AccessoryModelId");

                    b.HasIndex("AccessoryModelId1");

                    b.HasIndex("AccessoryModelId2");

                    b.HasIndex("AntennaId");

                    b.HasIndex("AntennaId1");

                    b.HasIndex("AntennaId2");

                    b.HasIndex("BatteryId");

                    b.HasIndex("BatteryId1");

                    b.HasIndex("BatteryId2");

                    b.HasIndex("CameraId");

                    b.HasIndex("CameraId1");

                    b.HasIndex("CameraId2");

                    b.HasIndex("ChargerId");

                    b.HasIndex("ChargerId1");

                    b.HasIndex("ChargerId2");

                    b.HasIndex("ESCId");

                    b.HasIndex("ESCId1");

                    b.HasIndex("ESCId2");

                    b.HasIndex("FlightControllerId");

                    b.HasIndex("FlightControllerId1");

                    b.HasIndex("FlightControllerId2");

                    b.HasIndex("FrameId");

                    b.HasIndex("FrameId1");

                    b.HasIndex("FrameId2");

                    b.HasIndex("FuselageId");

                    b.HasIndex("FuselageId1");

                    b.HasIndex("FuselageId2");

                    b.HasIndex("GoggleId");

                    b.HasIndex("GoggleId1");

                    b.HasIndex("GoggleId2");

                    b.HasIndex("LightId");

                    b.HasIndex("LightId1");

                    b.HasIndex("LightId2");

                    b.HasIndex("LinkTypeId");

                    b.HasIndex("MotorId");

                    b.HasIndex("MotorId1");

                    b.HasIndex("MotorId2");

                    b.HasIndex("PDBId");

                    b.HasIndex("PDBId1");

                    b.HasIndex("PDBId2");

                    b.HasIndex("PropId");

                    b.HasIndex("PropId1");

                    b.HasIndex("PropId2");

                    b.HasIndex("RCOtherId");

                    b.HasIndex("RCOtherId1");

                    b.HasIndex("RCOtherId2");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReceiverId1");

                    b.HasIndex("ReceiverId2");

                    b.HasIndex("ServoId");

                    b.HasIndex("ServoId1");

                    b.HasIndex("ServoId2");

                    b.HasIndex("StoreId");

                    b.HasIndex("TransmitterId");

                    b.HasIndex("TransmitterId1");

                    b.HasIndex("TransmitterId2");

                    b.HasIndex("VideoReceiverId");

                    b.HasIndex("VideoReceiverId1");

                    b.HasIndex("VideoReceiverId2");

                    b.HasIndex("VideoTransmitterId");

                    b.HasIndex("VideoTransmitterId1");

                    b.HasIndex("VideoTransmitterId2");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("fpv_info.Models.LinkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LinkTypes");
                });

            modelBuilder.Entity("fpv_info.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("fpv_info.Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Efficiency");

                    b.Property<float>("LoadCurrent");

                    b.Property<int?>("MotorId");

                    b.Property<string>("Name");

                    b.Property<int>("Power");

                    b.Property<int?>("PropTypeId");

                    b.Property<int>("Pull");

                    b.Property<int?>("SourceId");

                    b.Property<int?>("VoltageId");

                    b.HasKey("Id");

                    b.HasIndex("MotorId");

                    b.HasIndex("PropTypeId");

                    b.HasIndex("SourceId");

                    b.HasIndex("VoltageId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("fpv_info.Models.Motor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<float>("Height");

                    b.Property<int?>("InstallDimensionId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("KVId");

                    b.Property<int?>("ManufacturerId");

                    b.Property<float>("MotorMountHoleSize");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<float>("ShaftDiameter");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<float>("Width");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("InstallDimensionId");

                    b.HasIndex("KVId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VoltageId");

                    b.ToTable("Motors");
                });

            modelBuilder.Entity("fpv_info.Models.MotorKV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MotorKVs");
                });

            modelBuilder.Entity("fpv_info.Models.PDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CurrentSensor");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimensions");

                    b.Property<int?>("InputVoltageId");

                    b.Property<int?>("InstallDimensionId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int?>("PDBTypeId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("InputVoltageId");

                    b.HasIndex("InstallDimensionId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PDBTypeId");

                    b.ToTable("PDBs");
                });

            modelBuilder.Entity("fpv_info.Models.PDBType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PDBTypes");
                });

            modelBuilder.Entity("fpv_info.Models.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("VideoTransmitterId");

                    b.HasKey("Id");

                    b.HasIndex("VideoTransmitterId");

                    b.ToTable("Powers");
                });

            modelBuilder.Entity("fpv_info.Models.ProcessorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("fpv_info.Models.Prop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<float>("MountingHole");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Props");
                });

            modelBuilder.Entity("fpv_info.Models.PropType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PropTypes");
                });

            modelBuilder.Entity("fpv_info.Models.RCOther", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int?>("TypeId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("TypeId");

                    b.ToTable("RCOthers");
                });

            modelBuilder.Entity("fpv_info.Models.RCOtherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RCOtherTypes");
                });

            modelBuilder.Entity("fpv_info.Models.RCProtocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RCProtocols");
                });

            modelBuilder.Entity("fpv_info.Models.Receiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimension");

                    b.Property<int?>("FrequencyId");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<int?>("OutputId");

                    b.Property<bool>("SPort");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OutputId");

                    b.HasIndex("VoltageId");

                    b.ToTable("Receivers");
                });

            modelBuilder.Entity("fpv_info.Models.Servo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimension");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<string>("OperatingSpeed");

                    b.Property<string>("StallTorque");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VoltageId");

                    b.ToTable("Servos");
                });

            modelBuilder.Entity("fpv_info.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("fpv_info.Models.Transmitter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<bool>("IsCompared");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Transmitters");
                });

            modelBuilder.Entity("fpv_info.Models.TransmitterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FrequencyId");

                    b.Property<string>("Name");

                    b.Property<int?>("PowerId");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("PowerId");

                    b.HasIndex("TypeId");

                    b.ToTable("TransmitterTypes");
                });

            modelBuilder.Entity("fpv_info.Models.VideoReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AntennaConnectorId");

                    b.Property<float>("AntennaGain");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimension");

                    b.Property<int?>("FrequencyId");

                    b.Property<bool>("IsCompared");

                    b.Property<bool>("LowBand");

                    b.Property<int?>("ManufacturerId");

                    b.Property<int>("N_Channels");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<bool>("RaceBand");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("AntennaConnectorId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VoltageId");

                    b.ToTable("VideoReceivers");
                });

            modelBuilder.Entity("fpv_info.Models.VideoTransmitter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AntennaConnectorId");

                    b.Property<string>("BEC");

                    b.Property<string>("Description_en");

                    b.Property<string>("Description_ru");

                    b.Property<string>("Dimension");

                    b.Property<int?>("FrequencyId");

                    b.Property<bool>("IsCompared");

                    b.Property<bool>("LowBand");

                    b.Property<int?>("ManufacturerId");

                    b.Property<bool>("Mic");

                    b.Property<int>("N_Channels");

                    b.Property<string>("Name_en");

                    b.Property<string>("Name_ru");

                    b.Property<bool>("PitMode");

                    b.Property<bool>("RaceBand");

                    b.Property<bool>("VTXControl");

                    b.Property<int?>("VoltageId");

                    b.Property<float>("Weight");

                    b.Property<string>("Сomment");

                    b.HasKey("Id");

                    b.HasIndex("AntennaConnectorId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VoltageId");

                    b.ToTable("VideoTransmitters");
                });

            modelBuilder.Entity("fpv_info.Models.Voltage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Voltages");
                });

            modelBuilder.Entity("fpv_info.Models.AccessoryModel", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.AccessoryType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("fpv_info.Models.Antenna", b =>
                {
                    b.HasOne("fpv_info.Models.AntennaConnector", "AntennaConnector")
                        .WithMany()
                        .HasForeignKey("AntennaConnectorId");

                    b.HasOne("fpv_info.Models.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("fpv_info.Models.Battery", b =>
                {
                    b.HasOne("fpv_info.Models.BattaryType", "BattaryType")
                        .WithMany()
                        .HasForeignKey("BattaryTypeId");

                    b.HasOne("fpv_info.Models.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId");

                    b.HasOne("fpv_info.Models.DischargeRate", "DischargeRate")
                        .WithMany()
                        .HasForeignKey("DischargeRateId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.BEC", b =>
                {
                    b.HasOne("fpv_info.Models.PDB")
                        .WithMany("BECs")
                        .HasForeignKey("PDBId");
                });

            modelBuilder.Entity("fpv_info.Models.Camera", b =>
                {
                    b.HasOne("fpv_info.Models.AspectRatio", "AspectRatio")
                        .WithMany()
                        .HasForeignKey("AspectRatioId");

                    b.HasOne("fpv_info.Models.FOV", "FOV")
                        .WithMany()
                        .HasForeignKey("FOVId");

                    b.HasOne("fpv_info.Models.HorizontalResolution", "HorizontalResolution")
                        .WithMany()
                        .HasForeignKey("HorizontalResolutionId");

                    b.HasOne("fpv_info.Models.ImageSensor", "ImageSensor")
                        .WithMany()
                        .HasForeignKey("ImageSensorId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.Charger", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Voltage", "PbBatteryVoltage")
                        .WithMany()
                        .HasForeignKey("PbBatteryVoltageId");

                    b.HasOne("fpv_info.Models.Power", "PowerCharge")
                        .WithMany()
                        .HasForeignKey("PowerChargeId");

                    b.HasOne("fpv_info.Models.Power", "PowerDischarge")
                        .WithMany()
                        .HasForeignKey("PowerDischargeId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.ESC", b =>
                {
                    b.HasOne("fpv_info.Models.Current", "Current")
                        .WithMany()
                        .HasForeignKey("CurrentId");

                    b.HasOne("fpv_info.Models.FirmwareModel", "Firmware")
                        .WithMany()
                        .HasForeignKey("FirmwareId");

                    b.HasOne("fpv_info.Models.InstallDimension", "InstallDimension")
                        .WithMany()
                        .HasForeignKey("InstallDimensionId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Current", "PeakCurrent")
                        .WithMany()
                        .HasForeignKey("PeakCurrentId");

                    b.HasOne("fpv_info.Models.ProcessorModel", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.FileModel", b =>
                {
                    b.HasOne("fpv_info.Models.AccessoryModel")
                        .WithMany("Images")
                        .HasForeignKey("AccessoryModelId");

                    b.HasOne("fpv_info.Models.Antenna")
                        .WithMany("Images")
                        .HasForeignKey("AntennaId");

                    b.HasOne("fpv_info.Models.Battery")
                        .WithMany("Images")
                        .HasForeignKey("BatteryId");

                    b.HasOne("fpv_info.Models.Camera")
                        .WithMany("Images")
                        .HasForeignKey("CameraId");

                    b.HasOne("fpv_info.Models.Charger")
                        .WithMany("Images")
                        .HasForeignKey("ChargerId");

                    b.HasOne("fpv_info.Models.ESC")
                        .WithMany("Images")
                        .HasForeignKey("ESCId");

                    b.HasOne("fpv_info.Models.FlightController")
                        .WithMany("Images")
                        .HasForeignKey("FlightControllerId");

                    b.HasOne("fpv_info.Models.Frame")
                        .WithMany("Images")
                        .HasForeignKey("FrameId");

                    b.HasOne("fpv_info.Models.Fuselage")
                        .WithMany("Images")
                        .HasForeignKey("FuselageId");

                    b.HasOne("fpv_info.Models.Goggle")
                        .WithMany("Images")
                        .HasForeignKey("GoggleId");

                    b.HasOne("fpv_info.Models.Light")
                        .WithMany("Images")
                        .HasForeignKey("LightId");

                    b.HasOne("fpv_info.Models.Motor")
                        .WithMany("Images")
                        .HasForeignKey("MotorId");

                    b.HasOne("fpv_info.Models.PDB")
                        .WithMany("Images")
                        .HasForeignKey("PDBId");

                    b.HasOne("fpv_info.Models.Prop")
                        .WithMany("Images")
                        .HasForeignKey("PropId");

                    b.HasOne("fpv_info.Models.RCOther")
                        .WithMany("Images")
                        .HasForeignKey("RCOtherId");

                    b.HasOne("fpv_info.Models.Receiver")
                        .WithMany("Images")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("fpv_info.Models.Servo")
                        .WithMany("Images")
                        .HasForeignKey("ServoId");

                    b.HasOne("fpv_info.Models.Transmitter")
                        .WithMany("Images")
                        .HasForeignKey("TransmitterId");

                    b.HasOne("fpv_info.Models.VideoReceiver")
                        .WithMany("Images")
                        .HasForeignKey("VideoReceiverId");

                    b.HasOne("fpv_info.Models.VideoTransmitter")
                        .WithMany("Images")
                        .HasForeignKey("VideoTransmitterId");
                });

            modelBuilder.Entity("fpv_info.Models.FlightController", b =>
                {
                    b.HasOne("fpv_info.Models.FirmwareModel", "Firmware")
                        .WithMany()
                        .HasForeignKey("FirmwareId");

                    b.HasOne("fpv_info.Models.Gyro", "Gyro")
                        .WithMany()
                        .HasForeignKey("GyroId");

                    b.HasOne("fpv_info.Models.InstallDimension", "InstallDimension")
                        .WithMany()
                        .HasForeignKey("InstallDimensionId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.ProcessorModel", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.Frame", b =>
                {
                    b.HasOne("fpv_info.Models.InstallDimensionMotor", "InstallDimensionMotor")
                        .WithMany()
                        .HasForeignKey("InstallDimensionMotorId");

                    b.HasOne("fpv_info.Models.InstallDimension", "InstallDimensionProc")
                        .WithMany()
                        .HasForeignKey("InstallDimensionProcId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("fpv_info.Models.FrameType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("fpv_info.Models.Fuselage", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("fpv_info.Models.FuselageType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("fpv_info.Models.Goggle", b =>
                {
                    b.HasOne("fpv_info.Models.AspectRatio", "AspectRatio")
                        .WithMany()
                        .HasForeignKey("AspectRatioId");

                    b.HasOne("fpv_info.Models.Display", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId");

                    b.HasOne("fpv_info.Models.FOV", "FOV")
                        .WithMany()
                        .HasForeignKey("FOVId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("fpv_info.Models.Light", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("fpv_info.Models.Link", b =>
                {
                    b.HasOne("fpv_info.Models.AccessoryModel")
                        .WithMany("MediaLinks")
                        .HasForeignKey("AccessoryModelId");

                    b.HasOne("fpv_info.Models.AccessoryModel")
                        .WithMany("SourceLinks")
                        .HasForeignKey("AccessoryModelId1");

                    b.HasOne("fpv_info.Models.AccessoryModel")
                        .WithMany("StoreLinks")
                        .HasForeignKey("AccessoryModelId2");

                    b.HasOne("fpv_info.Models.Antenna")
                        .WithMany("MediaLinks")
                        .HasForeignKey("AntennaId");

                    b.HasOne("fpv_info.Models.Antenna")
                        .WithMany("SourceLinks")
                        .HasForeignKey("AntennaId1");

                    b.HasOne("fpv_info.Models.Antenna")
                        .WithMany("StoreLinks")
                        .HasForeignKey("AntennaId2");

                    b.HasOne("fpv_info.Models.Battery")
                        .WithMany("MediaLinks")
                        .HasForeignKey("BatteryId");

                    b.HasOne("fpv_info.Models.Battery")
                        .WithMany("SourceLinks")
                        .HasForeignKey("BatteryId1");

                    b.HasOne("fpv_info.Models.Battery")
                        .WithMany("StoreLinks")
                        .HasForeignKey("BatteryId2");

                    b.HasOne("fpv_info.Models.Camera")
                        .WithMany("MediaLinks")
                        .HasForeignKey("CameraId");

                    b.HasOne("fpv_info.Models.Camera")
                        .WithMany("SourceLinks")
                        .HasForeignKey("CameraId1");

                    b.HasOne("fpv_info.Models.Camera")
                        .WithMany("StoreLinks")
                        .HasForeignKey("CameraId2");

                    b.HasOne("fpv_info.Models.Charger")
                        .WithMany("MediaLinks")
                        .HasForeignKey("ChargerId");

                    b.HasOne("fpv_info.Models.Charger")
                        .WithMany("SourceLinks")
                        .HasForeignKey("ChargerId1");

                    b.HasOne("fpv_info.Models.Charger")
                        .WithMany("StoreLinks")
                        .HasForeignKey("ChargerId2");

                    b.HasOne("fpv_info.Models.ESC")
                        .WithMany("MediaLinks")
                        .HasForeignKey("ESCId");

                    b.HasOne("fpv_info.Models.ESC")
                        .WithMany("SourceLinks")
                        .HasForeignKey("ESCId1");

                    b.HasOne("fpv_info.Models.ESC")
                        .WithMany("StoreLinks")
                        .HasForeignKey("ESCId2");

                    b.HasOne("fpv_info.Models.FlightController")
                        .WithMany("MediaLinks")
                        .HasForeignKey("FlightControllerId");

                    b.HasOne("fpv_info.Models.FlightController")
                        .WithMany("SourceLinks")
                        .HasForeignKey("FlightControllerId1");

                    b.HasOne("fpv_info.Models.FlightController")
                        .WithMany("StoreLinks")
                        .HasForeignKey("FlightControllerId2");

                    b.HasOne("fpv_info.Models.Frame")
                        .WithMany("MediaLinks")
                        .HasForeignKey("FrameId");

                    b.HasOne("fpv_info.Models.Frame")
                        .WithMany("SourceLinks")
                        .HasForeignKey("FrameId1");

                    b.HasOne("fpv_info.Models.Frame")
                        .WithMany("StoreLinks")
                        .HasForeignKey("FrameId2");

                    b.HasOne("fpv_info.Models.Fuselage")
                        .WithMany("MediaLinks")
                        .HasForeignKey("FuselageId");

                    b.HasOne("fpv_info.Models.Fuselage")
                        .WithMany("SourceLinks")
                        .HasForeignKey("FuselageId1");

                    b.HasOne("fpv_info.Models.Fuselage")
                        .WithMany("StoreLinks")
                        .HasForeignKey("FuselageId2");

                    b.HasOne("fpv_info.Models.Goggle")
                        .WithMany("MediaLinks")
                        .HasForeignKey("GoggleId");

                    b.HasOne("fpv_info.Models.Goggle")
                        .WithMany("SourceLinks")
                        .HasForeignKey("GoggleId1");

                    b.HasOne("fpv_info.Models.Goggle")
                        .WithMany("StoreLinks")
                        .HasForeignKey("GoggleId2");

                    b.HasOne("fpv_info.Models.Light")
                        .WithMany("MediaLinks")
                        .HasForeignKey("LightId");

                    b.HasOne("fpv_info.Models.Light")
                        .WithMany("SourceLinks")
                        .HasForeignKey("LightId1");

                    b.HasOne("fpv_info.Models.Light")
                        .WithMany("StoreLinks")
                        .HasForeignKey("LightId2");

                    b.HasOne("fpv_info.Models.LinkType", "LinkType")
                        .WithMany()
                        .HasForeignKey("LinkTypeId");

                    b.HasOne("fpv_info.Models.Motor")
                        .WithMany("MediaLinks")
                        .HasForeignKey("MotorId");

                    b.HasOne("fpv_info.Models.Motor")
                        .WithMany("SourceLinks")
                        .HasForeignKey("MotorId1");

                    b.HasOne("fpv_info.Models.Motor")
                        .WithMany("StoreLinks")
                        .HasForeignKey("MotorId2");

                    b.HasOne("fpv_info.Models.PDB")
                        .WithMany("MediaLinks")
                        .HasForeignKey("PDBId");

                    b.HasOne("fpv_info.Models.PDB")
                        .WithMany("SourceLinks")
                        .HasForeignKey("PDBId1");

                    b.HasOne("fpv_info.Models.PDB")
                        .WithMany("StoreLinks")
                        .HasForeignKey("PDBId2");

                    b.HasOne("fpv_info.Models.Prop")
                        .WithMany("MediaLinks")
                        .HasForeignKey("PropId");

                    b.HasOne("fpv_info.Models.Prop")
                        .WithMany("SourceLinks")
                        .HasForeignKey("PropId1");

                    b.HasOne("fpv_info.Models.Prop")
                        .WithMany("StoreLinks")
                        .HasForeignKey("PropId2");

                    b.HasOne("fpv_info.Models.RCOther")
                        .WithMany("MediaLinks")
                        .HasForeignKey("RCOtherId");

                    b.HasOne("fpv_info.Models.RCOther")
                        .WithMany("SourceLinks")
                        .HasForeignKey("RCOtherId1");

                    b.HasOne("fpv_info.Models.RCOther")
                        .WithMany("StoreLinks")
                        .HasForeignKey("RCOtherId2");

                    b.HasOne("fpv_info.Models.Receiver")
                        .WithMany("MediaLinks")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("fpv_info.Models.Receiver")
                        .WithMany("SourceLinks")
                        .HasForeignKey("ReceiverId1");

                    b.HasOne("fpv_info.Models.Receiver")
                        .WithMany("StoreLinks")
                        .HasForeignKey("ReceiverId2");

                    b.HasOne("fpv_info.Models.Servo")
                        .WithMany("MediaLinks")
                        .HasForeignKey("ServoId");

                    b.HasOne("fpv_info.Models.Servo")
                        .WithMany("SourceLinks")
                        .HasForeignKey("ServoId1");

                    b.HasOne("fpv_info.Models.Servo")
                        .WithMany("StoreLinks")
                        .HasForeignKey("ServoId2");

                    b.HasOne("fpv_info.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("fpv_info.Models.Transmitter")
                        .WithMany("MediaLinks")
                        .HasForeignKey("TransmitterId");

                    b.HasOne("fpv_info.Models.Transmitter")
                        .WithMany("SourceLinks")
                        .HasForeignKey("TransmitterId1");

                    b.HasOne("fpv_info.Models.Transmitter")
                        .WithMany("StoreLinks")
                        .HasForeignKey("TransmitterId2");

                    b.HasOne("fpv_info.Models.VideoReceiver")
                        .WithMany("MediaLinks")
                        .HasForeignKey("VideoReceiverId");

                    b.HasOne("fpv_info.Models.VideoReceiver")
                        .WithMany("SourceLinks")
                        .HasForeignKey("VideoReceiverId1");

                    b.HasOne("fpv_info.Models.VideoReceiver")
                        .WithMany("StoreLinks")
                        .HasForeignKey("VideoReceiverId2");

                    b.HasOne("fpv_info.Models.VideoTransmitter")
                        .WithMany("MediaLinks")
                        .HasForeignKey("VideoTransmitterId");

                    b.HasOne("fpv_info.Models.VideoTransmitter")
                        .WithMany("SourceLinks")
                        .HasForeignKey("VideoTransmitterId1");

                    b.HasOne("fpv_info.Models.VideoTransmitter")
                        .WithMany("StoreLinks")
                        .HasForeignKey("VideoTransmitterId2");
                });

            modelBuilder.Entity("fpv_info.Models.Measurement", b =>
                {
                    b.HasOne("fpv_info.Models.Motor")
                        .WithMany("Measurement")
                        .HasForeignKey("MotorId");

                    b.HasOne("fpv_info.Models.PropType", "PropType")
                        .WithMany()
                        .HasForeignKey("PropTypeId");

                    b.HasOne("fpv_info.Models.Link", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.Motor", b =>
                {
                    b.HasOne("fpv_info.Models.InstallDimensionMotor", "InstallDimension")
                        .WithMany()
                        .HasForeignKey("InstallDimensionId");

                    b.HasOne("fpv_info.Models.MotorKV", "KV")
                        .WithMany()
                        .HasForeignKey("KVId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.PDB", b =>
                {
                    b.HasOne("fpv_info.Models.Voltage", "InputVoltage")
                        .WithMany()
                        .HasForeignKey("InputVoltageId");

                    b.HasOne("fpv_info.Models.InstallDimension", "InstallDimension")
                        .WithMany()
                        .HasForeignKey("InstallDimensionId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.PDBType", "PDBType")
                        .WithMany()
                        .HasForeignKey("PDBTypeId");
                });

            modelBuilder.Entity("fpv_info.Models.Power", b =>
                {
                    b.HasOne("fpv_info.Models.VideoTransmitter")
                        .WithMany("Powers")
                        .HasForeignKey("VideoTransmitterId");
                });

            modelBuilder.Entity("fpv_info.Models.Prop", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("fpv_info.Models.RCOther", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.RCOtherType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("fpv_info.Models.Receiver", b =>
                {
                    b.HasOne("fpv_info.Models.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.RCProtocol", "Output")
                        .WithMany()
                        .HasForeignKey("OutputId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.Servo", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.Transmitter", b =>
                {
                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("fpv_info.Models.TransmitterType", b =>
                {
                    b.HasOne("fpv_info.Models.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId");

                    b.HasOne("fpv_info.Models.Power", "Power")
                        .WithMany()
                        .HasForeignKey("PowerId");

                    b.HasOne("fpv_info.Models.TransmitterType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("fpv_info.Models.VideoReceiver", b =>
                {
                    b.HasOne("fpv_info.Models.AntennaConnector", "AntennaConnector")
                        .WithMany()
                        .HasForeignKey("AntennaConnectorId");

                    b.HasOne("fpv_info.Models.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });

            modelBuilder.Entity("fpv_info.Models.VideoTransmitter", b =>
                {
                    b.HasOne("fpv_info.Models.AntennaConnector", "AntennaConnector")
                        .WithMany()
                        .HasForeignKey("AntennaConnectorId");

                    b.HasOne("fpv_info.Models.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId");

                    b.HasOne("fpv_info.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("fpv_info.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId");
                });
#pragma warning restore 612, 618
        }
    }
}
